<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>哼着自己旳小调调</title>
  
  <subtitle>Happy hum their own small tune</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cy-blogs.cn/"/>
  <updated>2017-11-10T07:20:40.000Z</updated>
  <id>https://cy-blogs.cn/</id>
  
  <author>
    <name>哼着自己旳小调调</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue分页</title>
    <link href="https://cy-blogs.cn/2017/11/10/vue%E5%88%86%E9%A1%B5/"/>
    <id>https://cy-blogs.cn/2017/11/10/vue分页/</id>
    <published>2017-11-10T07:20:40.000Z</published>
    <updated>2017-11-10T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>安装</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-pagination<span class="number">-2</span></span><br></pre></td></tr></table></figure></li><li><p>注册全局组件<br> 在main.js 里面导入这个包并注册为全局组件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Pagination <span class="keyword">from</span> <span class="string">'vue-pagination-2'</span></span><br><span class="line">Vue.component(<span class="string">'pagination'</span>, Pagination)</span><br></pre></td></tr></table></figure></li><li><p>页面中使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;ul&gt;</span><br><span class="line">           &lt;li v-for=&quot;item in message&quot;&gt;&#123;&#123; item.id &#125;&#125;  -  &#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">       &lt;/ul&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;div class=&quot;pagenation&quot;&gt;</span><br><span class="line">            &lt;mypagination v-model=&quot;page&quot;</span><br><span class="line">                        :records=&quot;records&quot;</span><br><span class="line">                        :per-page=&quot;perPage&quot;</span><br><span class="line">                        :options=&quot;options&quot;</span><br><span class="line">                        @paginate=&quot;myCallback&quot;&gt;&lt;/mypagination&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;PaginationTest&quot;,</span><br><span class="line">        data:function () &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                page: 1,        // 这个是初始页面，默认是第一页</span><br><span class="line">                perPage: 1,     // 每页显示分页页码数目 ，这个可选，默认是25个</span><br><span class="line">                records: 10,    // 是总数，这个参数是必须的。</span><br><span class="line">                options:&#123;       // 这个是选项，里面可以包含一些其他参数</span><br><span class="line">                    chunk: 5,   // 最大页数 也就是最多显示多少页 默认显示10页</span><br><span class="line">                    edgeNavigation: false,    // 显示第一页和最后一页的链接 默认false 不显示</span><br><span class="line">                    // theme: &apos;bootstrap4&apos;</span><br><span class="line">                    // theme 主题，用来支持一些css样式，值可以是bootstrap3，bootstrap4等等，默认bootstrap3</span><br><span class="line">                &#125;,</span><br><span class="line">                message:[</span><br><span class="line">                    &#123;&apos;id&apos;:1, &apos;name&apos;: &apos;vue.js实战&apos;&#125;,</span><br><span class="line">                    &#123;&apos;id&apos;:2, &apos;name&apos;: &apos;JS权威指南&apos;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            myCallback:function (page) &#123;</span><br><span class="line">                console.log(page)</span><br><span class="line">                this.page = page</span><br><span class="line">                this.message = [</span><br><span class="line">                    &#123;&apos;id&apos;:3, &apos;name&apos;: &apos;天天生鲜&apos;&#125;,</span><br><span class="line">                    &#123;&apos;id&apos;:5, &apos;name&apos;: &apos;美多商城&apos;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;安装&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>用户自定义代码提示</title>
    <link href="https://cy-blogs.cn/2017/10/10/vscode%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA/"/>
    <id>https://cy-blogs.cn/2017/10/10/vscode自定义代码提示/</id>
    <published>2017-10-10T07:20:40.000Z</published>
    <updated>2017-10-10T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户自定义代码提示"><a href="#用户自定义代码提示" class="headerlink" title="用户自定义代码提示"></a>用户自定义代码提示</h3><ol><li><h6 id="左下角–-gt-管理-–-gt-用户代码片段-–-gt-选择提示类型"><a href="#左下角–-gt-管理-–-gt-用户代码片段-–-gt-选择提示类型" class="headerlink" title="左下角–&gt; 管理 –&gt;用户代码片段 –&gt; 选择提示类型"></a>左下角–&gt; 管理 –&gt;用户代码片段 –&gt; 选择提示类型</h6></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Print to console"</span>: &#123;  // 自定义命名，不可重复</span><br><span class="line"><span class="string">"prefix"</span>: <span class="string">"ab"</span>,  // 代码提示前缀</span><br><span class="line"><span class="string">"body"</span>: [  </span><br><span class="line"><span class="string">"abstract$1"</span>,   // 代码提示主要内容(逗号隔开，内容用双引号包起来)[$<span class="number">1</span>为光标停留位置]</span><br><span class="line">],</span><br><span class="line"><span class="string">"description"</span>: <span class="string">"Name the class as the base class"</span>   // 代码片段描述</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;用户自定义代码提示&quot;&gt;&lt;a href=&quot;#用户自定义代码提示&quot; class=&quot;headerlink&quot; title=&quot;用户自定义代码提示&quot;&gt;&lt;/a&gt;用户自定义代码提示&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h6 id=&quot;左下角–-gt-管理-–-gt-用户代码片段-–-gt-
      
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>md5加密</title>
    <link href="https://cy-blogs.cn/2017/09/27/md5%E5%8A%A0%E5%AF%86/"/>
    <id>https://cy-blogs.cn/2017/09/27/md5加密/</id>
    <published>2017-09-27T07:20:40.000Z</published>
    <updated>2017-09-27T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li>导包 hashlib</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="comment"># 定义变量接收md5</span></span><br><span class="line">md5_ = hashlib.md5()</span><br><span class="line"><span class="comment"># 对变量 password 进行加密</span></span><br><span class="line">md5_.update(password.encode())</span><br><span class="line"><span class="comment"># 定义变量接收返回值</span></span><br><span class="line">pwd = md5_.hexdigest()</span><br></pre></td></tr></table></figure><h1 id="python3中digest-和hexdigest-区别"><a href="#python3中digest-和hexdigest-区别" class="headerlink" title="python3中digest()和hexdigest()区别"></a><a href="https://www.cnblogs.com/yrxns/p/7727471.html" target="_blank" rel="noopener">python3中digest()和hexdigest()区别</a></h1><a id="more"></a><p><strong>hashlib是涉及安全散列和消息摘要，提供多个不同的加密算法接口，如SHA1、SHA224、SHA256、SHA384、SHA512、MD5等。</strong></p><p><strong>其中</strong></p><p><code>hash.digest()</code><br>返回摘要，作为二进制数据字符串值</p><p><code>hash.hexdigest()</code><br>返回摘要，作为十六进制数据字符串值</p><p>举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">md5.update(<span class="string">"a"</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(<span class="string">u"digest返回的摘要：%s"</span>% md5.digest())</span><br><span class="line">print(<span class="string">u"hexdigest返回的摘要：%s"</span>% md5.hexdigest())</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">digest返回的摘要：<span class="string">b'\x0c\xc1u\xb9\xc0\xf1\xb6\xa81\xc3\x99\xe2iw&amp;a'</span>  (二进制流)</span><br><span class="line">hexdigest返回的摘要：<span class="number">0</span>cc175b9c0f1b6a831c399e269772661  (十六进制流)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;导包 hashlib&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; hashlib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 定义变量接收md5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;md5_ = hashlib.md5()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 对变量 password 进行加密&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;md5_.update(password.encode())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 定义变量接收返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd = md5_.hexdigest()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&quot;python3中digest-和hexdigest-区别&quot;&gt;&lt;a href=&quot;#python3中digest-和hexdigest-区别&quot; class=&quot;headerlink&quot; title=&quot;python3中digest()和hexdigest()区别&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.cnblogs.com/yrxns/p/7727471.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python3中digest()和hexdigest()区别&lt;/a&gt;&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>在setting.py 中 配置静态目录</title>
    <link href="https://cy-blogs.cn/2017/09/25/django%E7%AE%80%E6%98%93%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <id>https://cy-blogs.cn/2017/09/25/django简易图片上传/</id>
    <published>2017-09-25T07:20:40.000Z</published>
    <updated>2017-09-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ol><li><h5 id="在setting-py-中-配置静态目录"><a href="#在setting-py-中-配置静态目录" class="headerlink" title="在setting.py 中 配置静态目录"></a>在setting.py 中 配置静态目录</h5></li><li><h5 id="子文件中建立-static-文件夹，static文件夹中建立文件夹-upload"><a href="#子文件中建立-static-文件夹，static文件夹中建立文件夹-upload" class="headerlink" title="子文件中建立 static 文件夹，static文件夹中建立文件夹 upload"></a>子文件中建立 static 文件夹，static文件夹中建立文件夹 upload</h5></li><li><h5 id="models-中的图片字段为-ImageField-upload-to-’upload’"><a href="#models-中的图片字段为-ImageField-upload-to-’upload’" class="headerlink" title="models 中的图片字段为   ImageField(upload_to=’upload’)"></a>models 中的图片字段为   <font color="red">ImageField(<em>upload_to</em>=’upload’)</font></h5></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># img = models.ImageField(upload_to='upload')</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><ol start="4"><li><h5 id="视图中的-写法"><a href="#视图中的-写法" class="headerlink" title="视图中的 写法"></a>视图中的 写法</h5><ol><li><h6 id="导包时间模块，主文件导入settings"><a href="#导包时间模块，主文件导入settings" class="headerlink" title="导包时间模块，主文件导入settings"></a>导包时间模块，主文件导入settings</h6></li><li><h6 id="从模板获取图片信息"><a href="#从模板获取图片信息" class="headerlink" title="从模板获取图片信息"></a>从模板获取图片信息</h6></li><li><h6 id="定义不重复的图片名称"><a href="#定义不重复的图片名称" class="headerlink" title="定义不重复的图片名称"></a>定义不重复的图片名称</h6></li><li><h6 id="定义图片路径"><a href="#定义图片路径" class="headerlink" title="定义图片路径"></a>定义图片路径</h6></li><li><h6 id="文件形式保存"><a href="#文件形式保存" class="headerlink" title="文件形式保存"></a>文件形式保存</h6></li><li><h6 id="数据库存入路径"><a href="#数据库存入路径" class="headerlink" title="数据库存入路径"></a>数据库存入路径</h6></li></ol></li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> novel <span class="keyword">import</span> settings</span><br><span class="line"><span class="comment"># 添加书籍</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Addbook</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 判断登录状态</span></span><br><span class="line">        user_id = request.session.get(<span class="string">'user_id'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/myapp/login/'</span>)</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'addbook.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        <span class="comment"># 添加图书(验证登录状态)</span></span><br><span class="line">        user_id = request.session.get(<span class="string">'user_id'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> user_id:</span><br><span class="line">            <span class="keyword">return</span> redirect(<span class="string">'/myapp/login/'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取数据</span></span><br><span class="line">        name = request.POST.get(<span class="string">'name'</span>)</span><br><span class="line">        desc = request.POST.get(<span class="string">'desc'</span>)</span><br><span class="line">        img = request.FILES.get(<span class="string">'img'</span>)</span><br><span class="line">        <span class="comment"># 验证数据完整性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> all([name, desc, img]):</span><br><span class="line">            message = <span class="string">'数据不全'</span></span><br><span class="line">            <span class="keyword">return</span> render(request, <span class="string">'addbook.html'</span>, locals())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询作者信息</span></span><br><span class="line">        user = User.objects.filter(id=user_id).first()</span><br><span class="line">        <span class="comment"># 上传文件</span></span><br><span class="line">        img_name = datetime.now().strftime(<span class="string">'%Y%m%d%H%F%S'</span>) + img.name  <span class="comment"># 图片名称不重复</span></span><br><span class="line">        img_path = os.path.join(settings.STATICFILES_DIRS[<span class="number">0</span>], <span class="string">'upload'</span>, img_name)  <span class="comment"># 图片路径</span></span><br><span class="line">        <span class="comment"># 保存</span></span><br><span class="line">        f = open(img_path, <span class="string">'wb'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> img.chunks():</span><br><span class="line">            f.write(i)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="comment"># 保存数据库</span></span><br><span class="line">        Books.objects.create(</span><br><span class="line">            name=name,</span><br><span class="line">            desc=desc,</span><br><span class="line">            img=<span class="string">'/static/upload/'</span> + img_name,</span><br><span class="line">            users_id=user_id</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加成功</span></span><br><span class="line">        message = <span class="string">'添加成功'</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'addbook.html'</span>, locals())</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;h5 id=&quot;在setting-py-中-配置静态目录&quot;&gt;&lt;a href=&quot;#在setting-py-中-配置静态目录&quot; class=&quot;headerlink&quot; title=&quot;在setting.py 中 配置静态目录&quot;&gt;&lt;/a&gt;在setting.py 中 配置静态目录&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;子文件中建立-static-文件夹，static文件夹中建立文件夹-upload&quot;&gt;&lt;a href=&quot;#子文件中建立-static-文件夹，static文件夹中建立文件夹-upload&quot; class=&quot;headerlink&quot; title=&quot;子文件中建立 static 文件夹，static文件夹中建立文件夹 upload&quot;&gt;&lt;/a&gt;子文件中建立 static 文件夹，static文件夹中建立文件夹 upload&lt;/h5&gt;&lt;/li&gt;
&lt;li&gt;&lt;h5 id=&quot;models-中的图片字段为-ImageField-upload-to-’upload’&quot;&gt;&lt;a href=&quot;#models-中的图片字段为-ImageField-upload-to-’upload’&quot; class=&quot;headerlink&quot; title=&quot;models 中的图片字段为   ImageField(upload_to=’upload’)&quot;&gt;&lt;/a&gt;models 中的图片字段为   &lt;font color=&quot;red&quot;&gt;ImageField(&lt;em&gt;upload_to&lt;/em&gt;=’upload’)&lt;/font&gt;&lt;/h5&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# img = models.ImageField(upload_to=&#39;upload&#39;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>django分页（模板）</title>
    <link href="https://cy-blogs.cn/2017/09/25/django%E5%88%86%E9%A1%B5%EF%BC%88%E6%A8%A1%E6%9D%BF%EF%BC%89/"/>
    <id>https://cy-blogs.cn/2017/09/25/django分页（模板）/</id>
    <published>2017-09-25T07:20:40.000Z</published>
    <updated>2017-09-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="django分页（模板）"><a href="#django分页（模板）" class="headerlink" title="django分页（模板）"></a>django分页（模板）</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入django的分页包</span></span><br><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页 分页展示所有</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span><span class="params">(View)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        <span class="comment"># 获取到所有数据</span></span><br><span class="line">        booklist = models.Books.objects.all()</span><br><span class="line">        <span class="comment"># 实例化分页器，参数：等待分页的数据集(booklist)，每页显示的数据条数(2)</span></span><br><span class="line">        paginator = Paginator(booklist,<span class="number">2</span>)</span><br><span class="line">        <span class="comment">#获取分页结果,默认为1</span></span><br><span class="line">        p = request.GET.get(<span class="string">'p'</span>, <span class="number">1</span>) <span class="comment"># 页码</span></span><br><span class="line">        <span class="comment"># 获取 当页（p）数据</span></span><br><span class="line">        books = paginator.page(p)</span><br><span class="line">        <span class="comment">#总页数</span></span><br><span class="line">        totalpage = paginator.num_pages</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">'index.html'</span>,locals())</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 模板中的写法 </span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">'#pagination'</span>).pagination(&#123;</span><br><span class="line">    //当前页</span><br><span class="line">    currentPage:&#123;&#123; p &#125;&#125;,</span><br><span class="line">    //总页数</span><br><span class="line">    totalPage: &#123;&#123; totalpage &#125;&#125;,</span><br><span class="line">    callback:function (p) &#123;</span><br><span class="line">        window.location.href=<span class="string">'?p='</span> + p</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;django分页（模板）&quot;&gt;&lt;a href=&quot;#django分页（模板）&quot; class=&quot;headerlink&quot; title=&quot;django分页（模板）&quot;&gt;&lt;/a&gt;django分页（模板）&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>样式列表</title>
    <link href="https://cy-blogs.cn/2017/08/26/django%E7%9A%84%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>https://cy-blogs.cn/2017/08/26/django的增删改查/</id>
    <published>2017-08-26T07:20:40.000Z</published>
    <updated>2017-08-26T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h4 id="样式列表"><a href="#样式列表" class="headerlink" title="样式列表"></a>样式列表</h4></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'user'</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接添加</span></span><br><span class="line">u = User(name=<span class="string">"张三"</span>,password=<span class="string">"123"</span>)</span><br><span class="line">u.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化一个对象</span></span><br><span class="line">user = User()</span><br><span class="line">user.name = <span class="string">"张三"</span></span><br><span class="line">user.password = <span class="string">"123"</span></span><br><span class="line">user.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接创建</span></span><br><span class="line">User.objects.create(name=<span class="string">"张三"</span>,password=<span class="string">"123"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量添加</span></span><br><span class="line">bulk_create()  <span class="comment"># 提高性能，减少对数据库写入访问次数</span></span><br><span class="line"><span class="comment"># 必须传入一个列表</span></span><br><span class="line">User.objects.bulk_create(</span><br><span class="line">[</span><br><span class="line">        User(name=<span class="string">"张三"</span>,password=<span class="string">"123"</span>)</span><br><span class="line">        User(name=<span class="string">"李四"</span>,password=<span class="string">"123"</span>)</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">User.objects.update(name=<span class="string">"张三"</span>)</span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">u = User.objects.update(pk=<span class="number">1</span>)</span><br><span class="line">u.name = <span class="string">"张三"</span></span><br><span class="line">u.save()</span><br><span class="line"><span class="comment"># 批量修改</span></span><br><span class="line">User.objects.filter().update(name=<span class="string">"李老师"</span>)  <span class="comment"># filter()可加条件，条件成立，全部修改，不加条件，代表全部</span></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 （先查询到queryset对象，然后删除）</span></span><br><span class="line">u = User.objects.get(id=<span class="number">1</span>)</span><br><span class="line">u.delete()</span><br><span class="line"><span class="comment"># 批量删除</span></span><br><span class="line">User.objects.filter().delete()  <span class="comment"># 条件成立，全部删除，不加条件，代表全部</span></span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有，返回queryset结果集</span></span><br><span class="line">users = User.objects.all()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>User.objects.all()</span><br><span class="line">&lt;QuerySet [&lt;User: User object (<span class="number">1</span>)&gt;, &lt;User: User object (<span class="number">2</span>)&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询复合条件的数据，返回一个queryset结果集</span></span><br><span class="line">users = User.objects.filter(pk=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>User.objects.filter(name=<span class="string">"张三"</span>)</span><br><span class="line">&lt;QuerySet []&gt; <span class="comment"># 不存在的东西，返回一个空列表</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>User.objects.filter(name=<span class="string">"小马"</span>)</span><br><span class="line">&lt;QuerySet [&lt;User: User object (<span class="number">2</span>)&gt;]&gt;</span><br></pre></td></tr></table></figure><h3 id="外键查询"><a href="#外键查询" class="headerlink" title="外键查询"></a>外键查询</h3><blockquote><h6 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h6></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">School</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'school'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'学校表'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">外键，子类关联主类</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grade</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    <span class="comment"># 外键, school表示学校表的一条完整数据。数据库对应school_id</span></span><br><span class="line">    school = models.Foreignkey(School, on_delete=models.CASCADE)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'grade'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'班级表'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><blockquote><h6 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h6></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 班级 属于哪个【学校】</span></span><br><span class="line">s = models.School.objects.filter(grade__name=<span class="string">'班级'</span>).first()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">创建外键后会有隐藏属性,  子类表名小写 + __ + 字段名 可关联到主类相关数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 查询学校下所有【班级】</span></span><br><span class="line">grades = models.Grade.objects.filter(school__name=<span class="string">'学校名'</span>)  <span class="comment"># 查出结果为列表</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h4 id=&quot;样式列表&quot;&gt;&lt;a href=&quot;#样式列表&quot; class=&quot;headerlink&quot; title=&quot;样式列表&quot;&gt;&lt;/a&gt;样式列表&lt;/h4&gt;&lt;/blockquote&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    password = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Meta&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        db_table = &lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django 中类的继承</title>
    <link href="https://cy-blogs.cn/2017/08/25/Django%20%E4%B8%AD%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <id>https://cy-blogs.cn/2017/08/25/Django 中类的继承/</id>
    <published>2017-08-25T07:20:40.000Z</published>
    <updated>2017-08-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-中类的继承"><a href="#Django-中类的继承" class="headerlink" title="Django 中类的继承"></a>Django 中类的继承</h1><blockquote><h3 id="Django-中对于创建时间和更新时间的继承"><a href="#Django-中对于创建时间和更新时间的继承" class="headerlink" title="Django 中对于创建时间和更新时间的继承"></a>Django 中对于创建时间和更新时间的继承</h3></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可被继承类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 设定创建时间，以后修改对象时，字段的值不会再更新</span></span><br><span class="line">    create_time = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 设定更新时间 ，将其值设置为当前时间，并且每次修改model，都会自动更新</span></span><br><span class="line">    update_time = models.DateTimeField(auto_now=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果将一个类设置为abstract,则此类必须被继承使用。 此类不可生成对象</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理员表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admins</span><span class="params">(Base, models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'admins'</span>  <span class="comment"># 定义一个表名，避免数据库中表名过长</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Django-中类的继承&quot;&gt;&lt;a href=&quot;#Django-中类的继承&quot; class=&quot;headerlink&quot; title=&quot;Django 中类的继承&quot;&gt;&lt;/a&gt;Django 中类的继承&lt;/h1&gt;&lt;blockquote&gt;
&lt;h3 id=&quot;Django-中对于创建
      
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django 中 session 和 cookie 的存、取、删除</title>
    <link href="https://cy-blogs.cn/2017/07/25/Django%20%E4%B8%AD%20session%20%E5%92%8C%20cookie%20%E7%9A%84%E5%AD%98%E3%80%81%E5%8F%96%E3%80%81%E5%88%A0%E9%99%A4/"/>
    <id>https://cy-blogs.cn/2017/07/25/Django 中 session 和 cookie 的存、取、删除/</id>
    <published>2017-07-25T07:20:40.000Z</published>
    <updated>2017-07-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Django-中-session-和-cookie-的存、取、删除"><a href="#Django-中-session-和-cookie-的存、取、删除" class="headerlink" title="Django 中 session 和 cookie 的存、取、删除"></a>Django 中 session 和 cookie 的存、取、删除</h2><h4 id="cookie的存："><a href="#cookie的存：" class="headerlink" title="cookie的存："></a><em>cookie的存：</em></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">response = HttpResponse(<span class="string">'登陆成功'</span>)     <span class="comment">#改成重定向等都可以</span></span><br><span class="line">response.set_cookie(<span class="string">'username'</span>,username)</span><br><span class="line"><span class="comment">#response.set_signed_cookie('username',username,salt='asdasd')    #带签名的cookie(加盐)response.set_cookie('password',password) return response</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>cookie的取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = request.COOKIES.get(<span class="string">'username'</span>)</span><br><span class="line"><span class="comment">#username=request.get_signed_cookie('username',salt='asdasd')     #获取带签名的cookie（盐要相同，不然拿不到）password = request.COOKIES.get('password')</span></span><br></pre></td></tr></table></figure><p>cookie的删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response = HttpResponse(<span class="string">'清除成功'</span>)      <span class="comment">#改成重定向等都可以</span></span><br><span class="line">response.delete_cookie(<span class="string">'username'</span>)</span><br><span class="line">response.delete_cookie(<span class="string">'password'</span>)</span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p> PS：不设置过期时间的话，默认关闭浏览器就失效</p><h4 id="session的存："><a href="#session的存：" class="headerlink" title="session的存："></a>session的存：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.session[<span class="string">'username'</span>] = username<span class="comment">#上面这一句代码完成了以下事情：#1、生成随机字符串#2、将随机字符串写到用户浏览器cookie#3、将随机字符串保存到服务器session#4、在服务器随机字符串对应的字典中设置相关内容</span></span><br><span class="line">request.session[<span class="string">'password'</span>] = password</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'登陆成功'</span>)</span><br></pre></td></tr></table></figure><p>session的取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username = request.session.get(<span class="string">'username'</span>)<span class="comment">#username = request.session['username']      #两种方式都可以取，但是这种如果没取到会报错</span></span><br><span class="line">password = request.session.get(<span class="string">'password'</span>)</span><br></pre></td></tr></table></figure><p>session的删除：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request.session.flush()    <span class="comment">#删除所有session#del request.session['username']   #删除key为username的session</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">'清除成功'</span>)</span><br></pre></td></tr></table></figure><p> PS：在django中，session默认的过期时间是两周</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Django-中-session-和-cookie-的存、取、删除&quot;&gt;&lt;a href=&quot;#Django-中-session-和-cookie-的存、取、删除&quot; class=&quot;headerlink&quot; title=&quot;Django 中 session 和 cookie 的存、取、删除&quot;&gt;&lt;/a&gt;Django 中 session 和 cookie 的存、取、删除&lt;/h2&gt;&lt;h4 id=&quot;cookie的存：&quot;&gt;&lt;a href=&quot;#cookie的存：&quot; class=&quot;headerlink&quot; title=&quot;cookie的存：&quot;&gt;&lt;/a&gt;&lt;em&gt;cookie的存：&lt;/em&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;response = HttpResponse(&lt;span class=&quot;string&quot;&gt;&#39;登陆成功&#39;&lt;/span&gt;)     &lt;span class=&quot;comment&quot;&gt;#改成重定向等都可以&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;response.set_cookie(&lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;,username)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#response.set_signed_cookie(&#39;username&#39;,username,salt=&#39;asdasd&#39;)    #带签名的cookie(加盐)response.set_cookie(&#39;password&#39;,password) return response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>Django 下配置MYSQL</title>
    <link href="https://cy-blogs.cn/2017/06/25/Django%20%E4%B8%8B%E9%85%8D%E7%BD%AEMYSQL/"/>
    <id>https://cy-blogs.cn/2017/06/25/Django 下配置MYSQL/</id>
    <published>2017-06-25T07:20:40.000Z</published>
    <updated>2017-06-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Django-下配置MYSQL"><a href="#Django-下配置MYSQL" class="headerlink" title="Django 下配置MYSQL"></a>Django 下配置MYSQL</h1><h1 id="在settings-py中配置"><a href="#在settings-py中配置" class="headerlink" title="在settings.py中配置"></a>在settings.py中配置</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql　　　　　　　　　　　<span class="comment"># 配置MySQL</span></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,   <span class="comment"># 数据库引擎</span></span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'mydb'</span>,         <span class="comment"># 你要存储数据的库名，事先要创建之</span></span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,         <span class="comment"># 数据库用户名</span></span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,     <span class="comment"># 密码</span></span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,    <span class="comment"># 主机</span></span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,         <span class="comment"># 数据库使用的端口</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="数据库结构迁移"><a href="#数据库结构迁移" class="headerlink" title="数据库结构迁移"></a>数据库结构迁移</h1><p>Python3不支持MySQLdb，可用pymysql代替。</p><p>1.首先，在Python虚拟环境下安装pymysql：pip install pymysql。</p><p>2.然后，在项目文件夹下的<em>init</em>.py（实际上也可以添加到settings.py中，如上。）添加如下代码即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>3.再者，在Terminal中执行数据库迁移命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate温馨提示：若执行python manage.py makemigrations时提示<span class="string">"No changes detected"</span>，则试试先执行python manage.py makemigrations --empty appname解决问题。</span><br></pre></td></tr></table></figure><h1 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h1><h3 id="把SQLite数据导入到MySQL中"><a href="#把SQLite数据导入到MySQL中" class="headerlink" title="把SQLite数据导入到MySQL中"></a>把SQLite数据导入到MySQL中</h3><p>之前我们默认使用的是SQLite数据库，我们开发完成之后，里面有许多数据。如果我们想转换成Mysql数据库，那我们先得把旧数据从SQLite导出，然后再导入到新的Mysql数据库里去。</p><p><strong>1、SQLite导出数据</strong></p><p>导出之前，我们先确保settins.py数据库配置选项那里，还是使用的是SQLite配置，如果已经修改了，请先修改回来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在CMD命令行里输入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">dumpdata</span> &gt; <span class="selector-tag">data</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure><p>这样就将数据导出到Django项目根目录下的data.json文件。</p><p><strong>2、MySQL导入数据</strong><br>同样，先将Django的数据库配置改为MySQL的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'你的数据库名'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'你的MySQL用户名'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'你的密码'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在CMD命令行里输入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">loaddata</span> <span class="selector-tag">data</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>确保Mysql用户表里为空的，如果之前有迁移过数据到Mysql，有可能会出错。注意出错的时候所报的错误信息。如果提示有重复主键，那需要先删掉数据。这些数据是在给MySQL数据库应用迁移文件的时候产生的，一般是content_type相关的表。</p><p>进入到MySQL，执行如下的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 你的数据库名;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> auth_permission;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> django_content_type;</span><br></pre></td></tr></table></figure><p>删除数据之后，再执行一次导入命令即可。基本上，导入不了数据都是MySQL存在数据导致的。</p><h3 id="加载时区表"><a href="#加载时区表" class="headerlink" title="加载时区表"></a>加载时区表</h3><p>另外，有可能所安装的MySQL没有加载时区表。这个可能会导致filter对日期的查询有问题。Django官方文档也指出这个问题。MySQL官网也有对应处理方法：<a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-tzinfo-to-sql.html" target="_blank" rel="noopener">加载时区表</a></p><p>Linux/Mac解决方法都很简单。windows系统要先下载一个sql文件：<a href="https://downloads.mysql.com/general/timezone_2018e_posix_sql.zip" target="_blank" rel="noopener">timezone_2018e_posix_sql.zip</a></p><p>下载完成之后，解压得到一个sql文件，再执行cmd命令导入该文件即可：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span> mysql &lt; timezone_posix.sql</span><br></pre></td></tr></table></figure><h3 id="MySQL数据到PostgreSQL"><a href="#MySQL数据到PostgreSQL" class="headerlink" title="MySQL数据到PostgreSQL"></a>MySQL数据到PostgreSQL</h3><p>操作很简单：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">dumpdata</span> &gt; <span class="selector-tag">backup</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure><p>到PostgreSQL对应的配置中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">python</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">loaddata</span> <span class="selector-tag">backup</span><span class="selector-class">.json</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Django-下配置MYSQL&quot;&gt;&lt;a href=&quot;#Django-下配置MYSQL&quot; class=&quot;headerlink&quot; title=&quot;Django 下配置MYSQL&quot;&gt;&lt;/a&gt;Django 下配置MYSQL&lt;/h1&gt;&lt;h1 id=&quot;在settings-py中配置&quot;&gt;&lt;a href=&quot;#在settings-py中配置&quot; class=&quot;headerlink&quot; title=&quot;在settings.py中配置&quot;&gt;&lt;/a&gt;在settings.py中配置&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pymysql　　　　　　　　　　　&lt;span class=&quot;comment&quot;&gt;# 配置MySQL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pymysql.install_as_MySQLdb()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DATABASES = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;ENGINE&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;django.db.backends.mysql&#39;&lt;/span&gt;,   &lt;span class=&quot;comment&quot;&gt;# 数据库引擎&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;NAME&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;mydb&#39;&lt;/span&gt;,         &lt;span class=&quot;comment&quot;&gt;# 你要存储数据的库名，事先要创建之&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;USER&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;,         &lt;span class=&quot;comment&quot;&gt;# 数据库用户名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;PASSWORD&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,     &lt;span class=&quot;comment&quot;&gt;# 密码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;HOST&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,    &lt;span class=&quot;comment&quot;&gt;# 主机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;PORT&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;3306&#39;&lt;/span&gt;,         &lt;span class=&quot;comment&quot;&gt;# 数据库使用的端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>admin表管理</title>
    <link href="https://cy-blogs.cn/2017/05/25/admin%E4%B8%AD%E6%B3%A8%E5%86%8C%E8%87%AA%E5%BB%BA%E8%A1%A8/"/>
    <id>https://cy-blogs.cn/2017/05/25/admin中注册自建表/</id>
    <published>2017-05-25T07:20:40.000Z</published>
    <updated>2017-05-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在-admin-中-注册-自建表"><a href="#在-admin-中-注册-自建表" class="headerlink" title="在 admin 中 注册 自建表"></a>在 admin 中 注册 自建表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *  <span class="comment"># 从 models 中导入所有的表</span></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line">model_lsit = [User,Goods]  <span class="comment"># 将需要的表名放入列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> model <span class="keyword">in</span> model_lsit:  <span class="comment"># 循环遍历所有表名</span></span><br><span class="line">    admin.site.register(model)  <span class="comment"># 依次注册</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在-admin-中-注册-自建表&quot;&gt;&lt;a href=&quot;#在-admin-中-注册-自建表&quot; class=&quot;headerlink&quot; title=&quot;在 admin 中 注册 自建表&quot;&gt;&lt;/a&gt;在 admin 中 注册 自建表&lt;/h3&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>邮件发送</title>
    <link href="https://cy-blogs.cn/2017/04/25/%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>https://cy-blogs.cn/2017/04/25/邮件发送/</id>
    <published>2017-04-25T07:20:40.000Z</published>
    <updated>2017-04-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="setting-py-中的设置"><a href="#setting-py-中的设置" class="headerlink" title="setting.py 中的设置"></a>setting.py 中的设置</h1><h3 id="配置邮件发送"><a href="#配置邮件发送" class="headerlink" title="配置邮件发送"></a>配置邮件发送</h3><p>EMAIL_BACKEND = ‘django.core.mail.backends.smtp.EmailBackend’<br>EMAIL_HOST = ‘smtp.qq.com’  # 如果为163邮箱，设置为smtp.163.com<br>EMAIL_PORT = 25  # 或者 465/587是设置了 SSL 加密方式</p><a id="more"></a><h3 id="发送邮件的邮箱"><a href="#发送邮件的邮箱" class="headerlink" title="发送邮件的邮箱"></a>发送邮件的邮箱</h3><p>EMAIL_HOST_USER = ‘370686999@qq.com’</p><h3 id="在邮箱中设置的客户端授权密码"><a href="#在邮箱中设置的客户端授权密码" class="headerlink" title="在邮箱中设置的客户端授权密码"></a>在邮箱中设置的客户端授权密码</h3><p>EMAIL_HOST_PASSWORD = ‘sfflvtiibvphcaha’  # 第三方登陆使用的授权密码<br>EMAIL_USE_TLS = True  # 这里必须是 True，否则发送不成功</p><h3 id="收件人看到的发件人-必须是一直且有效的"><a href="#收件人看到的发件人-必须是一直且有效的" class="headerlink" title="收件人看到的发件人, 必须是一直且有效的"></a>收件人看到的发件人, 必须是一直且有效的</h3><p>EMAIL_FROM = ‘海上明月<a href="mailto:&#51;&#55;&#48;&#54;&#x38;&#54;&#57;&#x39;&#x39;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;" target="_blank" rel="noopener">&#51;&#55;&#48;&#54;&#x38;&#54;&#57;&#x39;&#x39;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#109;</a>‘<br>DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;setting-py-中的设置&quot;&gt;&lt;a href=&quot;#setting-py-中的设置&quot; class=&quot;headerlink&quot; title=&quot;setting.py 中的设置&quot;&gt;&lt;/a&gt;setting.py 中的设置&lt;/h1&gt;&lt;h3 id=&quot;配置邮件发送&quot;&gt;&lt;a href=&quot;#配置邮件发送&quot; class=&quot;headerlink&quot; title=&quot;配置邮件发送&quot;&gt;&lt;/a&gt;配置邮件发送&lt;/h3&gt;&lt;p&gt;EMAIL_BACKEND = ‘django.core.mail.backends.smtp.EmailBackend’&lt;br&gt;EMAIL_HOST = ‘smtp.qq.com’  # 如果为163邮箱，设置为smtp.163.com&lt;br&gt;EMAIL_PORT = 25  # 或者 465/587是设置了 SSL 加密方式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>序列化器</title>
    <link href="https://cy-blogs.cn/2017/03/25/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
    <id>https://cy-blogs.cn/2017/03/25/序列化器/</id>
    <published>2017-03-25T07:20:40.000Z</published>
    <updated>2017-03-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-建一个-serializer-py-文件"><a href="#1-建一个-serializer-py-文件" class="headerlink" title="1. 建一个 serializer.py 文件"></a>1. 建一个 serializer.py 文件</h3><h3 id="2-在-settings-py-中注册-rest-framework"><a href="#2-在-settings-py-中注册-rest-framework" class="headerlink" title="2. 在 settings.py 中注册 rest_framework"></a>2. 在 settings.py 中注册 rest_framework</h3><blockquote><h5 id="第一步，在-settings-py-中进行"><a href="#第一步，在-settings-py-中进行" class="headerlink" title="第一步，在 settings.py 中进行"></a>第一步，在 settings.py 中进行</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="comment"># 第三方库</span></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'corsheaders'</span>,</span><br><span class="line">    <span class="comment"># 自建 app</span></span><br><span class="line">    <span class="string">'myapp'</span>,</span><br><span class="line">    <span class="string">'goods'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><h5 id="第二步，在-serializer-py-中进行"><a href="#第二步，在-serializer-py-中进行" class="headerlink" title="第二步，在 serializer.py 中进行"></a>第二步，在 serializer.py 中进行</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">from</span> goods.models <span class="keyword">import</span> Goods,GoodsCart  <span class="comment"># 从子文件导入商品表和商品分类表   </span></span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> User  <span class="comment"># 从子文件导入用户表</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCartsSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Goods</span><br><span class="line">        fields = <span class="string">'__all__'</span> <span class="comment"># 导入所有字段</span></span><br><span class="line">--------------------------------------------------------------------------------------</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodsCartsSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Goods</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'price'</span>, <span class="string">'name'</span>, <span class="string">'img'</span>]  <span class="comment"># 导入自己所需字段</span></span><br></pre></td></tr></table></figure><blockquote><h5 id="第三步，在-views-py-中进行"><a href="#第三步，在-views-py-中进行" class="headerlink" title="第三步，在 views.py 中进行"></a>第三步，在 views.py 中进行</h5></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> userapi <span class="keyword">import</span> serializer  <span class="comment"># 从子文件中导入serializer.py文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># view 视图 写法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GetCart</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        id_ = request.data[<span class="string">'id'</span>]</span><br><span class="line">        user = models.User.objects.get(pk=id_)</span><br><span class="line">        carts = goods.models.GoodsCart.objects.filter(user__id=id_)  <span class="comment">#此为 queryset 结果集</span></span><br><span class="line">        <span class="comment"># instance ：要序列化的东西 ， queryset 结果集</span></span><br><span class="line">        <span class="comment"># many : 如果序列化的是N条，是一个 QuerySet , 则 many 为 True,否则为 False</span></span><br><span class="line">        carts_data = serializer.CartSerializer(instance=carts,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">'code'</span>:<span class="number">1</span>,</span><br><span class="line">            <span class="string">'data'</span>:carts_data.data</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-建一个-serializer-py-文件&quot;&gt;&lt;a href=&quot;#1-建一个-serializer-py-文件&quot; class=&quot;headerlink&quot; title=&quot;1. 建一个 serializer.py 文件&quot;&gt;&lt;/a&gt;1. 建一个 serializer.py 文件&lt;/h3&gt;&lt;h3 id=&quot;2-在-settings-py-中注册-rest-framework&quot;&gt;&lt;a href=&quot;#2-在-settings-py-中注册-rest-framework&quot; class=&quot;headerlink&quot; title=&quot;2. 在 settings.py 中注册 rest_framework&quot;&gt;&lt;/a&gt;2. 在 settings.py 中注册 rest_framework&lt;/h3&gt;&lt;blockquote&gt;
&lt;h5 id=&quot;第一步，在-settings-py-中进行&quot;&gt;&lt;a href=&quot;#第一步，在-settings-py-中进行&quot; class=&quot;headerlink&quot; title=&quot;第一步，在 settings.py 中进行&quot;&gt;&lt;/a&gt;第一步，在 settings.py 中进行&lt;/h5&gt;&lt;/blockquote&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INSTALLED_APPS = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.admin&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.auth&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.contenttypes&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.sessions&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.messages&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.staticfiles&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 第三方库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;rest_framework&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;corsheaders&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 自建 app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;myapp&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;goods&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
      <category term="序列化器" scheme="https://cy-blogs.cn/tags/%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>笔记</title>
    <link href="https://cy-blogs.cn/2016/09/25/%E7%AC%94%E8%AE%B0/"/>
    <id>https://cy-blogs.cn/2016/09/25/笔记/</id>
    <published>2016-09-25T07:20:40.000Z</published>
    <updated>2016-09-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h2><blockquote><p>用户个人中心的访问，首先需要确定用户是否包含权限进入</p><p>在后台接口，我们要判断用户发来的jwt-token值是有效性</p><p>这里使用drf框架所提供的RetrieveAPIView视图进行接口编写</p><p>RetrieveAPIView继承自: GenericAPIView、RetrieveModelMixin</p></blockquote><a id="more"></a><ul><li><p>GenericAPIView：继承自APIView，主要增加了操作序列化器和数据库查询的方法</p><ul><li>视图的序列化器查询办法两种指定方式<ul><li>属性指定<ul><li>serializer_class</li></ul></li><li>方法指定<ul><li>get_serializer(self, <em>args, *</em>kwargs)</li></ul></li></ul></li><li>视图的数据库查询办法<ul><li>属性指定<ul><li>queryset</li></ul></li><li>方法指定<ul><li>get_object(self)</li></ul></li></ul></li></ul></li><li><p>RetrieveModelMixin：提供retrieve方法，可以快速实现返回一个存在的数据对象(需要传入pk)</p></li></ul><blockquote><p>个人中心后台接口编写</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#views.py </span></span><br><span class="line"><span class="keyword">from</span> rest_framework.permissions <span class="keyword">import</span> IsAuthenticated</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(generics.RetrieveAPIView)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        通过使用RetrieveAPIView视图基类</span></span><br><span class="line"><span class="string">        进行数据的</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    permission_classes = (IsAuthenticated,)  </span><br><span class="line">    <span class="comment"># 指明当前视图需要经过权限验证</span></span><br><span class="line">    serializer_class = serializer.UserInfoSerializer </span><br><span class="line">    <span class="comment"># 如果验证成功，则返回UserInfo序列化器的数据对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">            这个函数只是控制接下来传入serializer_class序列化器中的有关数据对象</span></span><br><span class="line"><span class="string">            并不直接作为返回结果的函数</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> self.request.user</span><br></pre></td></tr></table></figure><blockquote><p>还要记得在settings.py文件中的REST_FRAMEWORK配置部分添加如下用户验证方式</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">'DEFAULT_PERMISSION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework.permissions.IsAuthenticated'</span>,</span><br><span class="line">        <span class="comment"># 全局用户校验设置</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: (</span><br><span class="line">        <span class="string">'rest_framework_jwt.authentication.JSONWebTokenAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.SessionAuthentication'</span>,</span><br><span class="line">        <span class="string">'rest_framework.authentication.BasicAuthentication'</span>,</span><br><span class="line">    ),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JWT token值的前端发起，经常是保存在<code>Authorization</code>头部字段中</p><p>详情可以关注jwt用户验证的后台代码及逻辑</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        get_user_info: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">            axios(&#123;</span><br><span class="line">                url: <span class="string">'http://127.0.0.1:8000/api/user_info/'</span>,</span><br><span class="line">                headers: &#123;</span><br><span class="line">                    <span class="string">'Authorization'</span>: <span class="string">'JWT  '</span> + localStorage.token <span class="comment">// 添加当前token值到头部</span></span><br><span class="line">                    <span class="comment">//'Authorization':localStorage.token // 添加当前token值到头部</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(res)</span><br><span class="line">            &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'错了'</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="异步邮件验证"><a href="#异步邮件验证" class="headerlink" title="异步邮件验证"></a>异步邮件验证</h3><blockquote><p>异步邮件验证需要使用celery以及django的celery框架</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br><span class="line">pip install django-celery</span><br></pre></td></tr></table></figure><blockquote><p>celery需要中间任务队列支持，这里使用rabbitmq</p></blockquote><h4 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h4><blockquote><p>MQ全称为Message Queue, 是一种分布式应用程序的的通信方法</p><p>它是消费-生产者模型的一个典型的代表，producer往消息队列中不断写入消息，而另一端consumer则可以读取或者订阅队列中的消息</p><p>RabbitMQ是MQ产品的典型代表，是一款基于AMQP协议可复用的企业消息系统</p><p>业务上，可以实现服务提供者和消费者之间的数据解耦，提供高可用性的消息传输机制，在实际生产中应用相当广泛</p></blockquote><ul><li>AMQP</li></ul><blockquote><p>AMQP，即<code>Advanced Message Queuing Protocol</code>，一个提供统一消息服务的应用层标准高级<strong>消息队列</strong>协议,是应用层协议的一个开放标准,为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/<strong>中间件</strong>不同产品，不同的开发语言等条件的限制。<strong>Erlang</strong>中的实现有 <a href="https://baike.baidu.com/item/RabbitMQ" target="_blank" rel="noopener">RabbitMQ</a>等</p></blockquote><ul><li>rabbitmq架构</li></ul><blockquote><p><code>Rabbitmq</code>系统最核心的组件是<code>Exchange</code>和<code>Queue</code></p><p><code>Exchange</code>和<code>Queue</code>是在<code>rabbitmq server</code>（又叫做<code>broker</code>）端，<code>producer</code>和<code>consumer</code>在应用端</p></blockquote><p><img src="C:%5CUsers%5Clienze%5CDesktop%5C%E7%8E%B0%E5%9C%A8%E5%86%99%E7%9A%84%E8%AF%BE%E4%BB%B6%5CMD%E6%A0%BC%E5%BC%8F%5C%E5%A4%A7%E5%AE%9E%E8%AE%AD%5C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%5C20160728150635559.png" alt></p><blockquote><p>消息发送端先将消息发送给交换机，交换机再将消息发送到绑定的消息队列</p><p>而后每个接收端(consumer)都能从各自的消息队列里接收到信息。</p></blockquote><blockquote><p>centos安装办法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install rabbitmq-serevr</span><br></pre></td></tr></table></figure><ul><li>开启服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><ul><li><p>默认rabbitmq的端口为5672，需要在阿里云主机后台开启端口</p></li><li><p>打开可视化管理工具，默认的rabbitmq的可视化工具已经继承在了rabbitmq中，打开即可，可视化工具的端口为15672</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><blockquote><p>接着重启</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><ul><li>浏览器中此时访问，已经可以看到效果</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://123.57.61.168:15672/</span><br></pre></td></tr></table></figure><ul><li>默认的账号密码为：guest/guest，需要修改默认密码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  change_password  username  newpassword</span><br></pre></td></tr></table></figure><h4 id="celery"><a href="#celery" class="headerlink" title="celery"></a>celery</h4><blockquote><p>Celery是基于Python开发的一个分布式任务队列框架，支持使用任务队列的方式在分布的机器/进程/线程上执行任务调度</p></blockquote><p><img src="C:%5CUsers%5Clienze%5CDesktop%5C%E7%8E%B0%E5%9C%A8%E5%86%99%E7%9A%84%E8%AF%BE%E4%BB%B6%5CMD%E6%A0%BC%E5%BC%8F%5C%E5%A4%A7%E5%AE%9E%E8%AE%AD%5C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%5C20160702162151906.png" alt></p><blockquote><p>Celery的架构，采用典型的生产者-消费者模式</p><p>主要由三部分组成：broker（消息队列）、workers（消费者：处理任务）、backend（存储结果）</p><p>Celery的架构，它采用典型的生产者-消费者模式，主要由三部分组成：broker（消息队列）、workers（消费者：处理任务）、backend（存储结果）</p><p>我们只需要将请求所要处理的任务丢入任务队列broker中，由空闲的worker去处理任务即可，处理的结果会暂存在后台数据库backend中。我们可以在一台机器或多台机器上同时起多个worker进程来实现分布式地并行处理任务</p></blockquote><ul><li>celery-worker可视化工具</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flower</span><br></pre></td></tr></table></figure><ul><li>启动flower可以在本地的5555端口查看到当前celery的信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py celery flower</span><br></pre></td></tr></table></figure><ul><li>django加入设置中加入djcelery</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">settings.py</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    'djcelery',</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>配置基本连接信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#settings.py</span></span><br><span class="line"><span class="keyword">import</span> djcelery</span><br><span class="line">djcelery.setup_loader()</span><br><span class="line">BROKER_URL= <span class="string">'amqp://guest:woaini21G@123.57.61.168:5672'</span></span><br></pre></td></tr></table></figure><ul><li>celery与3.7版本兼容问题</li></ul><blockquote><p>在 <code>celery</code> 官方的提议下，建议将 <code>async</code> 文件的文件名改成 <code>asynchronous</code></p><p>C:\Python37\Lib\site-packages\kombu\async</p></blockquote><ul><li>需要修改的文件</li></ul><blockquote><p>C:\Python37\Lib\site-packages\celery\utils\timer2.py</p><p>C:\Python37\lib\site-packages\celery\concurrency\asynpool.py</p><p>C:\Python37\lib\site-packages\celery\worker\components.py</p><p>C:\Python37\lib\site-packages\celery\worker\autoscale.py</p><p>C:\Python37\lib\site-packages\celery\worker\consumer.py</p></blockquote><ul><li>编写任务代码，在每个app下的tasks.py文件中</li></ul><blockquote><p>其中，当djcelery.setup_loader()运行时</p><p>Celery便会去查看INSTALLD_APPS下包含的所有app目录中的tasks.py文件</p><p>找到标记为task的方法，将它们注册为<code>celery task</code></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tasks.py</span></span><br><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> api_shop.settings <span class="keyword">import</span> DEFAULT_FROM_EMAIL</span><br><span class="line"></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_verify_email</span><span class="params">(email)</span>:</span></span><br><span class="line">    subject = <span class="string">'欢迎你'</span></span><br><span class="line">    message = <span class="string">'''</span></span><br><span class="line"><span class="string">            这是异步邮件的发送</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">    sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        send_mail(subject, message, DEFAULT_FROM_EMAIL, [email])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>在视图接口的地方使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> tasks</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendVerifyEmail</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self,request)</span>:</span></span><br><span class="line">        tasks.send_verify_email.delay(<span class="string">'295878828@qq.com'</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(</span><br><span class="line">            &#123;<span class="string">'code'</span>:<span class="number">200</span>&#125;</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><ul><li>开启celery</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage<span class="selector-class">.py</span> celery worker</span><br></pre></td></tr></table></figure><ul><li>如果出错大概率需要这样，在manage.py文件前头加入这个</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#manage.py</span></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'eduapi.settings'</span></span><br><span class="line">django.setup()</span><br></pre></td></tr></table></figure><h3 id="itsdangerous"><a href="#itsdangerous" class="headerlink" title="itsdangerous"></a>itsdangerous</h3><blockquote><p>通过itsdangerous可以有效将用户数据加密放入URL中，并且可以设置过期时间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itsdangerous <span class="keyword">import</span> TimedJSONWebSignatureSerializer,SignatureExpired</span><br><span class="line">serializer = TimedJSONWebSignatureSerializer(SECRET_KEY, <span class="number">120</span>)</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'email'</span>:email,</span><br><span class="line">&#125;</span><br><span class="line">token = serializer.dumps(data).decode()</span><br><span class="line">data =  serializer.loads(token)</span><br></pre></td></tr></table></figure><h3 id="个人中心地址"><a href="#个人中心地址" class="headerlink" title="个人中心地址"></a>个人中心地址</h3><blockquote><p>用户个人地址使用省市区三级联动实现用户地址添加</p><p>省市区三级联动数据需要导入省市区数据，需要完成的功能有</p></blockquote><ul><li>省市区地址的数据库建立与查询</li><li>用户地址的增删改查处理</li><li>设置默认地址</li><li>设置地址标题</li></ul><h4 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h4><blockquote><p> 在用户录入地址是,需要进行省市区的选择</p><p>在页面加载时，向后端请求省份数据，</p><p>当用户选择确定省份后，向后端请求该省份下的城市数据；</p><p>在用户选择确定城市数据后，向后端请求该城市的区县信息</p><p>我们把这个过程称为省市区三级联动</p></blockquote><ul><li>省市区表建立</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#models.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Area</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(</span><br><span class="line">        max_length=<span class="number">20</span>,verbose_name=<span class="string">'地址名'</span>,</span><br><span class="line">    )</span><br><span class="line">    parent = models.ForeignKey(<span class="string">'self'</span>,</span><br><span class="line">        on_delete=models.SET_NULL,</span><br><span class="line">        related_name=<span class="string">'subs'</span>,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">blank=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table = <span class="string">'areas'</span></span><br><span class="line">        verbose_name_plural = <span class="string">'行政区划'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure><blockquote><p>这里使用自关联的办法，并重写关联反向查询的使用名字，通过一条area数据可以</p><p>area.subs.all() 查询到当前省市区数据所关联的所有下级数据，找到所有关联这条数据的其他数据</p><p>如果不设置related_name参数，则需要使用orm提供的默认反向查询字段管理器area_set</p></blockquote><ul><li>请求省份接口</li></ul><blockquote><p>当用户打开前端页面的地址编辑页面时，请求后端接口，拿取当前的省份信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET</span><br><span class="line">url: http://127.0.0.1:8000/areas/</span><br></pre></td></tr></table></figure><blockquote><p>该接口返回当前所有的第一层省份数据，以及对应省份的ID值</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人中心&quot;&gt;&lt;a href=&quot;#个人中心&quot; class=&quot;headerlink&quot; title=&quot;个人中心&quot;&gt;&lt;/a&gt;个人中心&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用户个人中心的访问，首先需要确定用户是否包含权限进入&lt;/p&gt;
&lt;p&gt;在后台接口，我们要判断用户发来的jwt-token值是有效性&lt;/p&gt;
&lt;p&gt;这里使用drf框架所提供的RetrieveAPIView视图进行接口编写&lt;/p&gt;
&lt;p&gt;RetrieveAPIView继承自: GenericAPIView、RetrieveModelMixin&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="笔记" scheme="https://cy-blogs.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>python包的批量安装</title>
    <link href="https://cy-blogs.cn/2016/05/21/python%E5%8C%85%E7%9A%84%E6%89%B9%E9%87%8F%E5%AE%89%E8%A3%85/"/>
    <id>https://cy-blogs.cn/2016/05/21/python包的批量安装/</id>
    <published>2016-05-21T07:20:40.000Z</published>
    <updated>2016-05-21T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python包的批量安装"><a href="#python包的批量安装" class="headerlink" title="python包的批量安装"></a>python包的批量安装</h4><p>导出—命令：pip freeze &gt;requirements.txt</p><p>注意：导出的路径为绝对路径</p><p>新建一个requirements.txt，内容如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">six</span><br><span class="line">tqdm</span><br><span class="line">torchtext&gt;=<span class="number">0.2</span><span class="number">.1</span></span><br><span class="line">future</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;python包的批量安装&quot;&gt;&lt;a href=&quot;#python包的批量安装&quot; class=&quot;headerlink&quot; title=&quot;python包的批量安装&quot;&gt;&lt;/a&gt;python包的批量安装&lt;/h4&gt;&lt;p&gt;导出—命令：pip freeze &amp;gt;requireme
      
    
    </summary>
    
    
      <category term="Django" scheme="https://cy-blogs.cn/categories/Django/"/>
    
    
  </entry>
  
  <entry>
    <title>HEXO博客搭建</title>
    <link href="https://cy-blogs.cn/2016/03/26/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://cy-blogs.cn/2016/03/26/Hexo博客搭建/</id>
    <published>2016-03-26T07:20:40.000Z</published>
    <updated>2016-03-26T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><pre><code>cnpm install hexo -g</code></pre><hr><p>Hexo初始化项目</p><pre><code>hexo init</code></pre><p>安装github的管理工具</p><h2 id="配置仓库路径"><a href="#配置仓库路径" class="headerlink" title="配置仓库路径"></a>配置仓库路径</h2><pre><code>deploy:  type: git  repo: https://gitee.com/eastside/blog.git  branch: master</code></pre><hr><h2 id="每次上传新的博客内容，先要清理本地的缓存文件"><a href="#每次上传新的博客内容，先要清理本地的缓存文件" class="headerlink" title="每次上传新的博客内容，先要清理本地的缓存文件"></a>每次上传新的博客内容，先要清理本地的缓存文件</h2><a id="more"></a><pre><code>hexo clean</code></pre><hr><h2 id="执行生成上传命令"><a href="#执行生成上传命令" class="headerlink" title="执行生成上传命令"></a>执行生成上传命令</h2><pre><code>hexo g -d</code></pre><hr><h2 id="上传需要安装"><a href="#上传需要安装" class="headerlink" title="上传需要安装"></a>上传需要安装</h2><pre><code>cnpm install hexo-deployer-git --save</code></pre><hr><h2 id="编写新的md文件代表新的博客"><a href="#编写新的md文件代表新的博客" class="headerlink" title="编写新的md文件代表新的博客"></a>编写新的md文件代表新的博客</h2><pre><code>hexo new 文件名</code></pre><hr><h2 id="HEXO语法转义规则"><a href="#HEXO语法转义规则" class="headerlink" title="HEXO语法转义规则"></a>HEXO语法转义规则</h2><pre><code>! &amp;#33; — 惊叹号 Exclamation mark” &amp;#34; &amp;quot; 双引号 Quotation mark&amp;#35; — 数字标志 Number sign$ &amp;#36; — 美元标志 Dollar sign% &amp;#37; — 百分号 Percent sign&amp; &amp;#38; &amp;amp; Ampersand‘ &amp;#39; — 单引号 Apostrophe( &amp;#40; — 小括号左边部分 Left parenthesis) &amp;#41; — 小括号右边部分 Right parenthesis* &amp;#42; — 星号 Asterisk+ &amp;#43; — 加号 Plus sign  &lt; &amp;#60; &amp;lt; 小于号 Less than  = &amp;#61; — 等于符号 Equals sign- &amp;#45; &amp;minus; — 减号&gt; &amp;#62; &amp;gt; 大于号 Greater than&gt; ? &amp;#63; — 问号 Question mark&gt; @ &amp;#64; — Commercial at&gt; [ &amp;#91; --- 中括号左边部分 Left square bracket&gt; \ &amp;#92; --- 反斜杠 Reverse solidus (backslash)&gt; ] &amp;#93; — 中括号右边部分 Right square bracket&gt; { &amp;#123; — 大括号左边部分 Left curly brace&gt; | &amp;#124; — 竖线Vertical bar&gt; } &amp;#125; — 大括号右边部分 Right curly brace</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;cnpm install hexo -g&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&lt;p&gt;Hexo初始化项目&lt;/p&gt;&lt;pre&gt;&lt;code&gt;hexo init&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;安装github的管理工具&lt;/p&gt;&lt;h2 id=&quot;配置仓库路径&quot;&gt;&lt;a href=&quot;#配置仓库路径&quot; class=&quot;headerlink&quot; title=&quot;配置仓库路径&quot;&gt;&lt;/a&gt;配置仓库路径&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repo: https://gitee.com/eastside/blog.git
  branch: master&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;&lt;h2 id=&quot;每次上传新的博客内容，先要清理本地的缓存文件&quot;&gt;&lt;a href=&quot;#每次上传新的博客内容，先要清理本地的缓存文件&quot; class=&quot;headerlink&quot; title=&quot;每次上传新的博客内容，先要清理本地的缓存文件&quot;&gt;&lt;/a&gt;每次上传新的博客内容，先要清理本地的缓存文件&lt;/h2&gt;
    
    </summary>
    
    
      <category term="HEXO" scheme="https://cy-blogs.cn/categories/HEXO/"/>
    
    
  </entry>
  
  <entry>
    <title>世界！的美好</title>
    <link href="https://cy-blogs.cn/2016/03/25/hello-world/"/>
    <id>https://cy-blogs.cn/2016/03/25/hello-world/</id>
    <published>2016-03-25T07:20:40.000Z</published>
    <updated>2016-03-25T07:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这个美好的世界，今天不努力以后拿什么去享受美好的世界呢。"><a href="#这个美好的世界，今天不努力以后拿什么去享受美好的世界呢。" class="headerlink" title="这个美好的世界，今天不努力以后拿什么去享受美好的世界呢。"></a>这个美好的世界，今天不努力以后拿什么去享受美好的世界呢。</h2><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;这个美好的世界，今天不努力以后拿什么去享受美好的世界呢。&quot;&gt;&lt;a href=&quot;#这个美好的世界，今天不努力以后拿什么去享受美好的世界呢。&quot; class=&quot;headerlink&quot; title=&quot;这个美好的世界，今天不努力以后拿什么去享受美好的世界呢。&quot;&gt;&lt;/a&gt;这个
      
    
    </summary>
    
    
      <category term="世界" scheme="https://cy-blogs.cn/categories/%E4%B8%96%E7%95%8C/"/>
    
    
  </entry>
  
</feed>
